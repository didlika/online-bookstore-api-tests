name: API Automation Tests CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      base_url:
        description: 'API Base URL'
        required: false
        default: 'https://fakerestapi.azurewebsites.net/api/v1'
      test_suite:
        description: 'Test suite to run (all, books, authors, get, post, put, delete)'
        required: false
        default: 'all'
      reporter:
        description: 'Reporter type (html, list, json, junit)'
        required: false
        default: 'html'

env:
  DOCKER_IMAGE_NAME: playwright-api-tests
  BASE_URL: https://fakerestapi.azurewebsites.net/api/v1

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} | gzip > docker-image.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar.gz
          retention-days: 1

  test:
    name: Run API Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        suite: [books, authors]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load < docker-image.tar.gz

      - name: Determine test pattern
        id: test-pattern
        run: |
          if [ "${{ github.event.inputs.test_suite }}" == "all" ] || [ "${{ github.event.inputs.test_suite }}" == "" ]; then
            echo "pattern=${{ matrix.suite }}-" >> $GITHUB_OUTPUT
          else
            echo "pattern=${{ github.event.inputs.test_suite }}" >> $GITHUB_OUTPUT
          fi

      - name: Run ${{ matrix.suite }} tests
        run: |
          docker run \
            -e CI=true \
            -e BASE_URL=${{ github.event.inputs.base_url || env.BASE_URL }} \
            -e REPORTER=${{ github.event.inputs.reporter || 'list' }} \
            -e WORKERS=2 \
            -v ${{ github.workspace }}/playwright-report-${{ matrix.suite }}:/app/playwright-report \
            -v ${{ github.workspace }}/test-results-${{ matrix.suite }}:/app/test-results \
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
            npx playwright test ${{ matrix.suite }}- --reporter=html,list
        continue-on-error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.suite }}
          path: test-results-${{ matrix.suite }}/
          retention-days: 30

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.suite }}
          path: playwright-report-${{ matrix.suite }}/
          retention-days: 30

  test-combined:
    name: Run All Tests Combined
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'all'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load < docker-image.tar.gz

      - name: Run all tests
        run: |
          docker run \
            -e CI=true \
            -e BASE_URL=${{ github.event.inputs.base_url || env.BASE_URL }} \
            -e REPORTER=${{ github.event.inputs.reporter || 'html' }} \
            -e WORKERS=2 \
            -v ${{ github.workspace }}/playwright-report:/app/playwright-report \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: Upload combined test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-combined
          path: test-results/
          retention-days: 30

      - name: Upload combined HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-combined
          path: playwright-report/
          retention-days: 30

  report:
    name: Generate Test Report Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: all-test-results

      - name: Download all HTML reports
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: all-reports

      - name: Generate test summary
        run: |
          echo "# 🎭 Playwright API Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base URL:** ${{ github.event.inputs.base_url || env.BASE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Suites" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for test result directories
          if [ -d "all-test-results" ]; then
            for dir in all-test-results/test-results-*; do
              if [ -d "$dir" ]; then
                suite_name=$(basename "$dir" | sed 's/test-results-//')
                echo "- ✅ **${suite_name}** tests completed" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "⚠️ No test results found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Reports: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Test Results: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*View detailed reports in the **Actions** tab > **Artifacts** section*" >> $GITHUB_STEP_SUMMARY

  publish-report:
    name: Publish HTML Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all HTML reports
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: reports

      - name: Prepare report directory
        run: |
          mkdir -p gh-pages
          echo "<html><head><title>API Test Reports</title></head><body>" > gh-pages/index.html
          echo "<h1>API Automation Test Reports</h1>" >> gh-pages/index.html
          echo "<p>Build: ${{ github.sha }}</p>" >> gh-pages/index.html
          echo "<p>Date: $(date)</p>" >> gh-pages/index.html
          echo "<ul>" >> gh-pages/index.html
          
          for dir in reports/playwright-report-*; do
            if [ -d "$dir" ]; then
              suite_name=$(basename "$dir" | sed 's/playwright-report-//')
              mkdir -p "gh-pages/${suite_name}"
              cp -r "$dir"/* "gh-pages/${suite_name}/"
              echo "<li><a href='${suite_name}/index.html'>${suite_name} Tests</a></li>" >> gh-pages/index.html
            fi
          done
          
          echo "</ul></body></html>" >> gh-pages/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          destination_dir: reports/${{ github.run_number }}

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, report]
    if: always()

    steps:
      - name: Check test status
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "TEST_STATUS=✅ Success" >> $GITHUB_ENV
            echo "TEST_COLOR=good" >> $GITHUB_ENV
          else
            echo "TEST_STATUS=❌ Failed" >> $GITHUB_ENV
            echo "TEST_COLOR=danger" >> $GITHUB_ENV
          fi

      - name: Create status summary
        run: |
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ env.TEST_STATUS }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY